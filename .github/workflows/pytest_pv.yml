name: test vardict filter command
on:
    push:
        branches: [main, develop, release/*]
        tags:
            - '*'
        paths-ignore:
            - "docs/**"
            - "**.md"
    pull_request:
        branches: "*"
        paths-ignore:
            - "docs/**"
            - "**.md"
jobs:
    run_test_vardict_filter:
        # The type of runner that the job will run on
        runs-on: ubuntu-latest
        strategy:
            matrix:
                python-version: [3.8, 3.9]
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Set up Python 
              uses: actions/setup-python@v3
              with:
                  python-version: ${{ matrix.python-version }}

            - uses: snok/install-poetry@v1
                with:
                version: 1.1.12
                virtualenvs-create: true
                virtualenvs-in-project: true
            # Cache your dependencies (i.e. all the stuff in your `pyproject.toml`). Note the cache
            # key: if you're using multiple Python versions, or multiple OSes, you'd need to include
            # them in the cache key. I'm not, so it can be simple and just depend on the poetry.lock.
            - name: cache deps
                id: cache-deps
                uses: actions/cache@v2
                with:
                path: .venv
                key: pydeps-${{ hashFiles('**/poetry.lock') }}

            # Install dependencies. `--no-root` means "install all dependencies but not the project
            # itself", which is what you want to avoid caching _your_ code. The `if` statement
            # ensures this only runs on a cache miss.
            - run: poetry install --no-interaction --no-root
                if: steps.cache-deps.outputs.cache-hit != 'true'

            # Now install _your_ project. This isn't necessary for many types of projects -- particularly
            # things like Django apps don't need this. But it's a good idea since it fully-exercises the
            # pyproject.toml and makes that if you add things like console-scripts at some point that
            # they'll be installed and working.
            - run: poetry install --no-interaction
            - name: Pytest for postprocessing_variant_calls
              run: |
                  pytest tests
