#!/usr/bin/env python
# imports 
from __future__ import division
import os
import sys
import vcf
import time
import logging
from pathlib import Path
from typing import List, Optional
import typer
from vcf.parser import _Info as VcfInfo, _Format as VcfFormat, _vcf_metadata_parser as VcfMetadataParser
from .mutect_class import mutect_sample

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    datefmt="%m/%d/%Y %I:%M:%S %p",
    level=logging.DEBUG,
)

logger = logging.getLogger("filter")

app = typer.Typer(help="post-processing commands for MuTect version 1.1.5 VCFs.")
# paired sample filter 
single_app = typer.Typer()
app.add_typer(single_app, name="paired-sample", help="Post-processing commands for a paired sample MuTect version 1.1.5 VCF input file.")



@single_app.command("filter")
def filter(
    inputVcf: Path = typer.Option(
        ...,
        "--inputVcf",
        "-i",
        exists=True,
        file_okay=True,
        dir_okay=False,
        writable=False,
        readable=True,
        resolve_path=True,
        help="Input vcf generated by MuTect which needs to be processed",
    ),
    inputTxt: Path = typer.Option(
        ...,
        "--inputTxt",
        "-i",
        exists=True,
        file_okay=True,
        dir_okay=False,
        writable=False,
        readable=True,
        resolve_path=True,
        help="Input Txt file generated by MuTect which needs to be processed",
    ),
    refFasta: Path = typer.Option(
        ...,
        "--refFasta",
        exists=True,
        file_okay=True,
        dir_okay=False,
        writable=False,
        readable=True,
        resolve_path=True,
        help="Input reference fasta",
    ),
    tsampleName: str = typer.Option(
        "--tsampleName", help="Name of the tumor sample."
    ), 
    totalDepth: int = typer.Option(
        20,
        "--totalDepth",
        "-dp",
        min=20,
        help="Tumor total depth threshold",
    ),
    alleleDepth: int = typer.Option(
        "",
        "--alleledepth",
        "-ad",
        min=1,
        clamp=True,
    ),
    tnRatio: int = typer.Option(
        1,
        "--tnRatio",
        "-tnr",
        help="Tumor-Normal variant fraction ratio threshold",
    ),
    variantFraction: float = typer.Option(
        5e-05,
        "--variantFraction",
        "-vf",
        help="Tumor variant fraction threshold",
    ),
    outputDir: str = typer.Option(
        "", "--outDir", "-o", help="Full Path to the output dir"
    ),
):

    '''
    This tool helps to filter vardict version 1.4.6 VCFs for single sample calling
    '''
    logger.info("process_vardict: Started the run for doing standard filter.")
    # single sample case 
    # create vardict object 
    to_filter = mutect_sample(
            inputVcf, inputTxt, refFasta, outputDir, sampleName,totalDepth, 
            alleleDepth, variantFraction, tnRatio
    )
    # check for normal
    if to_filter.has_tumor_and_normal_cols():
        logger.error('Tumor and normal columns not identified in VCF file. Please check input file again.')
    else: 
        # filter single 
        vcf_out, txt_out = to_filter.filter_paired_sample()
    return vcf_out,txt_out


if __name__ == "__main__":
    app()
